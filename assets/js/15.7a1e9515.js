(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{497:function(e,a,v){"use strict";v.r(a);var _=v(4),s=Object(_.a)({},(function(){var e=this,a=e.$createElement,v=e._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"_1-什么是-webpack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-webpack"}},[e._v("#")]),e._v(" 1. 什么是 webpack")]),e._v(" "),v("p",[e._v("webpack 可以看做是模块打包机。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。")]),e._v(" "),v("p",[v("img",{attrs:{src:"/build-tools/1.png",alt:""}})]),e._v(" "),v("h2",{attrs:{id:"_2-webpack-可以实现功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-webpack-可以实现功能"}},[e._v("#")]),e._v(" 2. webpack 可以实现功能")]),e._v(" "),v("p",[e._v("通过安装各种 loader 和 plugin，webpack 可以只要可以实现以下功能：")]),e._v(" "),v("ul",[v("li",[e._v("代码转换："),v("code",[e._v("TypeScript")]),e._v(" 编译成 "),v("code",[e._v("JavaScript")]),e._v("，"),v("code",[e._v("less、scss")]),e._v(" 编译成 "),v("code",[e._v("css")]),e._v(" 等；")]),e._v(" "),v("li",[e._v("文件压缩：压缩 "),v("code",[e._v("JavaScript")]),e._v("、"),v("code",[e._v("css")]),e._v("、"),v("code",[e._v("html")]),e._v(" 代码，压缩合并雪碧图；")]),e._v(" "),v("li",[e._v("代码校验：使用 "),v("code",[e._v("eslint")]),e._v(" 相关插件可以实现实时代码校验；")]),e._v(" "),v("li",[e._v("代码分割：提取多个页面的公共代码实现按需加载；")]),e._v(" "),v("li",[e._v("模块合并：将一个功能的多个模块文件合并成一个文件；")]),e._v(" "),v("li",[e._v("自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；")]),e._v(" "),v("li",[e._v("扩展性强，插件机制完善以及插件丰富。")])]),e._v(" "),v("h2",{attrs:{id:"_3-webpack-的安装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-webpack-的安装"}},[e._v("#")]),e._v(" 3. webpack 的安装")]),e._v(" "),v("p",[e._v("安装 Node.js 和 NPM")]),e._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[e._v("nvm "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" v10.15.3\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 检查是否安装成功：")]),e._v("\nnode -v "),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" -v\n")])])]),v("p",[e._v("创建空目录和 package.json")]),e._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" my-project\n"),v("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" my-project\n"),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" init\n")])])]),v("p",[e._v("安装 webpack 和 webpack-cli")]),e._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" webpack webpack-cli --save-dev\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 检查是否安装成功")]),e._v("\n./node_modules/.bin/webpack -v\n")])])]),v("h2",{attrs:{id:"_4-运行-webpack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-运行-webpack"}},[e._v("#")]),e._v(" 4. 运行 webpack")]),e._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 在控制台运行")]),e._v("\nnpx webpack\nor\n./node_modules/.bin/webpack\n")])])]),v("h2",{attrs:{id:"_5-核心概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-核心概念"}},[e._v("#")]),e._v(" 5. 核心概念")]),e._v(" "),v("p",[e._v("在了解 webpack 前 ，需要掌握以下几个核心概念，以便后续的理解：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("entry")]),e._v("：打包的入口文件，webpack 执行打包构建的第一步将从 "),v("code",[e._v("entry")]),e._v(" 开始；")]),e._v(" "),v("li",[v("code",[e._v("output")]),e._v("：项目的出口文件，webpack 会将构建完成的文件输出到这个目录下；")]),e._v(" "),v("li",[v("code",[e._v("module")]),e._v("：在 webpack 的世界中一切都是模块。webpack 会根据模块的依赖关系递归的构建出一个依赖关系图。")]),e._v(" "),v("li",[v("code",[e._v("loader")]),e._v("：webpack 本身只理解 "),v("code",[e._v("JavaScript")]),e._v("，"),v("code",[e._v("loader")]),e._v(" 让 webpack 能够去处理那些非 "),v("code",[e._v("JavaScript")]),e._v(" 文件。loader 可以将所有类型的文件转换成 webpack 能够处理的有效模块，然后利用 webpack 的打包能力对它们进行处理；")]),e._v(" "),v("li",[v("code",[e._v("plugins")]),e._v("："),v("code",[e._v("loader")]),e._v(" 用于模块转换，而 "),v("code",[e._v("plugins")]),e._v(" 则用于 "),v("code",[e._v("loader")]),e._v(" 无法处理的任务，包括但不限于：代码压缩、分割、热更新等；")]),e._v(" "),v("li",[v("code",[e._v("chunk")]),e._v("：代码块，一个 "),v("code",[e._v("chunk")]),e._v(" 由多个模块组合而成，用于代码合并与分割；")]),e._v(" "),v("li",[v("code",[e._v("bundle")]),e._v("：跟 "),v("code",[e._v("chunk")]),e._v(" 是一一对应的关系；")])]),e._v(" "),v("h2",{attrs:{id:"_6-流程概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-流程概述"}},[e._v("#")]),e._v(" 6. 流程概述")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("初始化参数")]),e._v("：webpack 从配置文件和 "),v("code",[e._v("shell")]),e._v(" 语句中读取合并参数，得出最终参数；")]),e._v(" "),v("li",[v("code",[e._v("开始编译")]),e._v("：用得到的参数初始化 "),v("code",[e._v("Compiler")]),e._v(" 对象，加载所有配置的 "),v("code",[e._v("plugin")]),e._v("，执行对象的 "),v("code",[e._v("run")]),e._v(" 方法开始执行编译；")]),e._v(" "),v("li",[e._v("确定入口：根据配置中的 "),v("code",[e._v("entry")]),e._v(" 参数找出所有的入口文件；")]),e._v(" "),v("li",[e._v("编译模块：从入口文件出发，调用所有配置的 "),v("code",[e._v("loader")]),e._v(" 对模块进行转换，再递归的找出模块的依赖，形成依赖关系图以及每个模块的最终内容；")]),e._v(" "),v("li",[e._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 "),v("code",[e._v("chunk")]),e._v("，再把 "),v("code",[e._v("chunk")]),e._v(" 转换成一个单独文件加入到输出列表中；")]),e._v(" "),v("li",[e._v("输出完成：确定输出内容后，根据配置文件的输出路径和文件名，把文件内容写入文件系统中。")])]),e._v(" "),v("h2",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://segmentfault.com/a/1190000015088834",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack原理"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);